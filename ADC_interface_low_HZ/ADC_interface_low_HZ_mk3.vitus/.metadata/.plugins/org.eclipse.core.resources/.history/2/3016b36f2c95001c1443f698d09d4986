//AXI GPIO driver
#include "xgpio.h"

//send data over UART
#include "xil_printf.h"

//information about AXI peripherals
#include "xparameters.h"

int main(){

	// Initialize AXI GPIO
	XGpio ADC_0, ADC_1, ADC_2, ADC_3, ADC_4, ADC_5, ADC_6, ADC_7, ADC_8, ADC_9, ADC_10, ADC_11, variable_timer;

	XGpio_Initialize(&ADC_0, 0);
	XGpio_SetDataDirection(&ADC_0, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_0, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_1, 0);
	XGpio_SetDataDirection(&ADC_1, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_1, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_2, 0);
	XGpio_SetDataDirection(&ADC_2, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_2, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_3, 0);
	XGpio_SetDataDirection(&ADC_3, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_3, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_4, 0);
	XGpio_SetDataDirection(&ADC_4, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_4, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_5, 0);
	XGpio_SetDataDirection(&ADC_5, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_5, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_6, 0);
	XGpio_SetDataDirection(&ADC_6, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_6, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_7, 0);
	XGpio_SetDataDirection(&ADC_7, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_7, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_8, 0);
	XGpio_SetDataDirection(&ADC_8, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_8, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_9, 0);
	XGpio_SetDataDirection(&ADC_9, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_9, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_10, 0);
	XGpio_SetDataDirection(&ADC_10, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_10, 1, 0xFFFFFFFF);

	XGpio_Initialize(&ADC_11, 0);
	XGpio_SetDataDirection(&ADC_11, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&ADC_11, 1, 0xFFFFFFFF);

	XGpio_Initialize(&variable_timer, 0);
	XGpio_SetDataDirection(&variable_timer, 2, 0xFFFFFFFF);
	XGpio_SetDataDirection(&variable_timer, 1, 0xFFFFFFFF);

	u32 timer_status, ntimer_status;

	XGpio_DiscreteWrite(&variable_timer, 1, 100000);
	timer_status = XGpio_DiscreteRead(&variable_timer, 2);
	ntimer_status = 0;
	while (1){

		timer_status = XGpio_DiscreteRead(&variable_timer, 2);

		if(timer_status != ntimer_status){
			xil_printf("\nThis is a test!!!!!");
			ntimer_status = timer_status;
		}



	}
}
